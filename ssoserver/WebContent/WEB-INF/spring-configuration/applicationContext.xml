<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to Jasig under one or more contributor license agreements. 
	See the NOTICE file distributed with this work for additional information 
	regarding copyright ownership. Jasig licenses this file to you under the 
	Apache License, Version 2.0 (the "License"); you may not use this file except 
	in compliance with the License. You may obtain a copy of the License at the 
	following location: http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/util 
        http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/context  
        http://www.springframework.org/schema/context/spring-context.xsd">
	<description>
		This is the main Spring configuration file with some of
		the main "core"
		classes defined. You shouldn't really
		modify this unless
		you
		know what you're doing!
	</description>

	<!-- Including this aspectj-autoproxy element will cause spring to automatically 
		create proxies around any beans defined in this file that match the pointcuts 
		of any aspects defined in this file. -->
	<aop:aspectj-autoproxy />

	<!-- Message source for this context, loaded from localized "messages_xx" 
		files.] Disable the fallback mechanism to the system/JVM locale. By turning 
		off this behavior, CAS will be able to revert back to the default language 
		bundle that is "messages.properties" and will not rely on the JVM default 
		locale which introduces the side effect of rendering the UI in the JVM locale 
		by default. Also, explicitly set the default encoding to be UTF-8 when parsing 
		message bundles. The default, if not set, is none which forces ISO-8859-1 
		of java.util.ResourceBundle. -->
	<bean id="messageSource"
		class="org.jasig.cas.web.view.CasReloadableMessageBundle"
		p:basenames-ref="basenames" p:fallbackToSystemLocale="false"
		p:defaultEncoding="UTF-8" p:cacheSeconds="180"
		p:useCodeAsDefaultMessage="true" />

	<!-- Ticket Registry -->
	<bean id="ticketRegistry" class="com.liyingqiao.DefaultTicketRegistry" 
	p:stTimeout="5000" p:tgtTimeout = "7200"/>

	<util:list id="basenames">
		<value>classpath:custom_messages</value>
		<value>classpath:messages</value>
	</util:list>
	
	<!-- | The authentication manager defines security policy for 
		authentication by specifying at a minimum | the authentication handlers that 
		will be used to authenticate credential. While the AuthenticationManager 
		| interface supports plugging in another implementation, the default PolicyBasedAuthenticationManager 
		should | be sufficient in most cases. + -->
	<bean id="authenticationManager"
		class="org.jasig.cas.authentication.PolicyBasedAuthenticationManager">
		<constructor-arg>
			<map>
				<!-- | IMPORTANT | Every handler requires a unique name. | If more than 
					one instance of the same handler class is configured, you must explicitly 
					| set its name to something other than its default name (typically the simple 
					class name). -->
				<entry key-ref="proxyAuthenticationHandler"
					value-ref="proxyPrincipalResolver" />
				<entry key-ref="primaryAuthenticationHandler"
					value-ref="primaryPrincipalResolver" />
			</map>
		</constructor-arg>

		<!-- Uncomment the metadata populator to allow clearpass to capture and 
			cache the password This switch effectively will turn on clearpass. <property 
			name="authenticationMetaDataPopulators"> <util:list> <bean class="org.jasig.cas.extension.clearpass.CacheCredentialsMetaDataPopulator" 
			c:credentialCache-ref="encryptedMap" /> </util:list> </property> -->

		<!-- | Defines the security policy around authentication. Some alternative 
			policies that ship with CAS: | | * NotPreventedAuthenticationPolicy - all 
			credential must either pass or fail authentication | * AllAuthenticationPolicy 
			- all presented credential must be authenticated successfully | * RequiredHandlerAuthenticationPolicy 
			- specifies a handler that must authenticate its credential to pass -->
		<property name="authenticationPolicy">
			<bean
				class="org.jasig.cas.authentication.AnyAuthenticationPolicy" />
		</property>
	</bean>

	<!-- Required for proxy ticket mechanism. -->
	<bean id="proxyAuthenticationHandler"
		class="org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"
		p:httpClient-ref="httpClient" p:requireSecure="false" />

	<!-- | TODO: Replace this component with one suitable for your enviroment. 
		| | This component provides authentication for the kind of credential used 
		in your environment. In most cases | credential is a username/password pair 
		that lives in a system of record like an LDAP directory. | The most common 
		authentication handler beans: | | * org.jasig.cas.authentication.LdapAuthenticationHandler 
		| * org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler | * org.jasig.cas.adaptors.x509.authentication.handler.support.X509CredentialsAuthenticationHandler 
		| * org.jasig.cas.support.spnego.authentication.handler.support.JCIFSSpnegoAuthenticationHandler -->
	<bean class="org.jasig.cas.mongo.MongoManagement"
		p:connectionString="mongodb://172.20.53.122:28016" />
	<bean id="primaryAuthenticationHandler"
		class="com.liyingqiao.AcceptUsersAuthenticationHandler" />
	<!-- <bean id="primaryAuthenticationHandler" class="org.jasig.cas.authentication.AcceptUsersAuthenticationHandler"> 
		<property name="users"> <map> <entry key="casuser" value="Mellon"/> </map> 
		</property> </bean> -->

	<!-- Required for proxy ticket mechanism -->
	<bean id="proxyPrincipalResolver"
		class="org.jasig.cas.authentication.principal.BasicPrincipalResolver" />

	<!-- | Resolves a principal from a credential using an attribute repository 
		that is configured to resolve | against a deployer-specific store (e.g. LDAP). -->
	<bean id="primaryPrincipalResolver"
		class="org.jasig.cas.authentication.principal.PersonDirectoryPrincipalResolver">
		<property name="attributeRepository"
			ref="attributeRepository" />
	</bean>

	<!-- Bean that defines the attributes that a service may return. This example 
		uses the Stub/Mock version. A real implementation may go against a database 
		or LDAP server. The id should remain "attributeRepository" though. + -->
	<bean id="attributeRepository"
		class="org.jasig.services.persondir.support.StubPersonAttributeDao"
		p:backingMap-ref="attrRepoBackingMap" />

	<util:map id="attrRepoBackingMap">
		<entry key="uid" value="uid" />
		<entry key="eduPersonAffiliation" value="eduPersonAffiliation" />
		<entry key="groupMembership" value="groupMembership" />
	</util:map>

	<bean id="healthCheckMonitor"
		class="org.jasig.cas.monitor.HealthCheckMonitor"
		p:monitors-ref="monitorsList" />

	<util:list id="monitorsList">
		<bean class="org.jasig.cas.monitor.MemoryMonitor"
			p:freeMemoryWarnThreshold="10" />
		<!-- NOTE The following ticket registries support SessionMonitor: * DefaultTicketRegistry 
			* JpaTicketRegistry Remove this monitor if you use an unsupported registry. -->
		<bean class="org.jasig.cas.monitor.SessionMonitor"
			p:ticketRegistry-ref="ticketRegistry"
			p:serviceTicketCountWarnThreshold="5000"
			p:sessionCountWarnThreshold="100000" />
	</util:list>

	<util:list id="registeredServicesList">
		<!--<bean class="org.jasig.cas.services.RegexRegisteredService" p:id="0" 
			p:name="HTTP and IMAP" p:description="Allows HTTP(S) and IMAP(S) protocols" 
			p:serviceId="^(https?|imaps?)://.*" p:evaluationOrder="10000001" /> Use the 
			following definition instead of the above to further restrict access to services 
			within your domain (including sub domains). Note that example.com must be 
			replaced with the domain you wish to permit. This example also demonstrates 
			the configuration of an attribute filter that only allows for attributes 
			whose length is 3. -->

		<bean class="org.jasig.cas.services.RegexRegisteredService">
			<property name="id" value="0" />
			<property name="name" value="HTTP and IMAP" />
			<property name="description"
				value="Allows HTTP(S) and IMAP(S) protocols" />
			<property name="serviceId"
				value="^(https?|http?|imaps?)://.*" />
			<property name="evaluationOrder" value="10000001" />

			<property name="allowedAttributes">
				<list>
					<value>Id</value>
					<value>password</value>
				</list>
			</property>
		</bean>

	</util:list>

	<!-- Sample, in-memory data store for the ServiceRegistry. A real implementation 
		would probably want to replace this with the JPA-backed ServiceRegistry DAO 
		The name of this bean should remain "serviceRegistryDao". + -->
	<bean id="serviceRegistryDao"
		class="org.jasig.cas.services.InMemoryServiceRegistryDaoImpl"
		p:registeredServices-ref="registeredServicesList" />

	<bean id="servicesManager"
		class="org.jasig.cas.services.DefaultServicesManagerImpl">
		<constructor-arg index="0" ref="serviceRegistryDao" />
	</bean>

	<!-- Job to periodically reload services from service registry. This job 
		is needed for a clustered CAS environment since service changes in one CAS 
		node are not known to the other until a reload. -->
	<bean id="serviceRegistryReloaderJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
		p:targetObject-ref="servicesManager" p:targetMethod="reload" />

	<bean id="periodicServiceRegistryReloaderTrigger"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean"
		p:jobDetail-ref="serviceRegistryReloaderJobDetail"
		p:startDelay="${service.registry.quartz.reloader.startDelay:120000}"
		p:repeatInterval="${service.registry.quartz.reloader.repeatInterval:120000}" />

	<bean id="httpClient" class="org.jasig.cas.util.SimpleHttpClient"
		p:readTimeout="5000" p:connectionTimeout="5000" />

	<bean id="noRedirectHttpClient"
		class="org.jasig.cas.util.SimpleHttpClient" parent="httpClient"
		p:followRedirects="false" />

	<bean id="persistentIdGenerator"
		class="org.jasig.cas.authentication.principal.ShibbolethCompatiblePersistentIdGenerator"
		p:salt="casrocks" />

	<bean id="logoutManager"
		class="org.jasig.cas.logout.LogoutManagerImpl"
		p:servicesManager-ref="servicesManager"
		p:httpClient-ref="noRedirectHttpClient"
		p:logoutMessageBuilder-ref="logoutBuilder"
		p:disableSingleSignOut="${slo.callbacks.disabled:false}" />

	<bean id="logoutBuilder"
		class="org.jasig.cas.logout.SamlCompliantLogoutMessageCreator" />

	<!-- CentralAuthenticationService -->
	<!-- <bean id="centralAuthenticationService" class="org.jasig.cas.CentralAuthenticationServiceImpl"> 
		<constructor-arg index="0" ref="ticketRegistry"/> <constructor-arg index="1"> 
		<null /> </constructor-arg> <constructor-arg index="2" ref="authenticationManager"/> 
		<constructor-arg index="3" ref="ticketGrantingTicketUniqueIdGenerator"/> 
		<constructor-arg index="4" ref="uniqueIdGeneratorsMap"/> <constructor-arg 
		index="5" ref="grantingTicketExpirationPolicy"/> <constructor-arg index="6" 
		ref="serviceTicketExpirationPolicy"/> <constructor-arg index="7" ref="servicesManager"/> 
		<constructor-arg index="8" ref="logoutManager"/> <property name="persistentIdGenerator" 
		ref="persistentIdGenerator"/> </bean> -->
	<bean id="centralAuthenticationService"
		class="com.liyingqiao.CentralAuthenticationServiceImpl">
		<constructor-arg index="0" ref="ticketRegistry" />
		<constructor-arg index="1">
			<null />
		</constructor-arg>
		<constructor-arg index="2" ref="authenticationManager" />
		<constructor-arg index="3"
			ref="ticketGrantingTicketUniqueIdGenerator" />
		<constructor-arg index="4" ref="uniqueIdGeneratorsMap" />
		<!-- <constructor-arg index="5"
			ref="grantingTicketExpirationPolicy" /> -->
		<constructor-arg index="5">
			<null />
		</constructor-arg>
		<!-- <constructor-arg index="6"
			ref="serviceTicketExpirationPolicy" /> -->
		<constructor-arg index="6">
			<null />
		</constructor-arg>
		<constructor-arg index="7" ref="servicesManager" />
		<constructor-arg index="8" ref="logoutManager" />
		<property name="persistentIdGenerator"
			ref="persistentIdGenerator" />
	</bean>

	<bean id="proxy10Handler"
		class="org.jasig.cas.ticket.proxy.support.Cas10ProxyHandler" />

	<bean id="proxy20Handler"
		class="org.jasig.cas.ticket.proxy.support.Cas20ProxyHandler"
		p:httpClient-ref="httpClient"
		p:uniqueTicketIdGenerator-ref="proxy20TicketUniqueIdGenerator" />

	<!-- ADVISORS -->
	<bean id="advisorAutoProxyCreator"
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />

	<bean id="validationAnnotationBeanPostProcessor"
		class="org.jasig.cas.util.CustomBeanValidationPostProcessor"
		p:afterInitialization="true" />

	<!-- The scheduler bean wires up any triggers that define scheduled tasks -->
	<bean id="scheduler"
		class="org.jasig.cas.util.AutowiringSchedulerFactoryBean" />

	<context:component-scan
		base-package="*.liyingqiao.*" />

</beans>